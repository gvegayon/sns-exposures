
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(data.table)
> library(foreign)
> library(netdiffuseR)

Attaching package: ‘netdiffuseR’

The following object is masked from ‘package:base’:

    %*%

> 
> dat <- read.dta("data-raw/SNS datamerged081315edited.dta") |> as.data.table()
> str(dat)
Classes ‘data.table’ and 'data.frame':	2164 obs. of  2040 variables:
 $ t4_SubjectID  : int  411104010 411103015 411603020 411103026 411103016 411502003 411101024 411406008 411601018 411503018 ...
 $ School        : int  111 111 111 111 111 111 111 111 111 111 ...
 $ photoid       : int  1 2 7 13 14 15 20 22 25 27 ...
 $ sch_friend41  : int  347 424 NA 608 NA NA 79 37 NA 95 ...
 $ sch_friend42  : int  420 205 505 387 NA 265 214 258 185 166 ...
 $ sch_friend43  : int  442 536 NA 93 599 NA 440 71 NA 248 ...
 $ sch_friend44  : int  257 NA NA 119 NA 313 NA 143 NA 330 ...
 $ sch_friend45  : int  NA 36 NA 627 134 339 NA 427 NA 346 ...
 $ sch_friend46  : int  NA NA NA 610 NA NA NA 470 NA NA ...
 $ sch_friend47  : int  NA NA NA 569 377 NA NA 371 NA NA ...
 $ sch_friend48  : int  NA NA NA NA 41 NA 188 NA NA NA ...
 $ sch_friend49  : int  NA NA NA NA 233 NA 278 NA NA NA ...
 $ sch_friend410 : int  NA NA NA NA 494 NA NA NA NA NA ...
 $ sch_friend411 : int  NA NA NA NA NA NA NA NA NA NA ...
 $ sch_friend412 : int  NA NA NA NA NA NA NA NA NA NA ...
 $ sch_friend413 : int  NA NA NA NA NA NA NA NA NA NA ...
 $ sch_friend414 : int  NA NA NA NA NA NA 544 NA NA NA ...
 $ sch_friend415 : int  NA NA NA NA NA NA 109 NA NA NA ...
 $ sch_friend416 : int  NA NA NA NA NA NA 110 NA NA NA ...
 $ sch_friend417 : int  NA NA NA NA NA NA NA NA NA NA ...
 $ sch_friend418 : int  NA NA NA NA NA NA NA NA NA NA ...
 $ sch_friend419 : int  NA NA NA NA NA NA NA NA NA NA ...
 $ sch_admire41  : int  580 NA NA 104 72 28 109 148 NA 580 ...
 $ sch_admire42  : int  NA NA 621 NA 123 36 284 463 NA NA ...
 $ sch_admire43  : int  NA NA 580 NA 181 326 463 582 NA 352 ...
 $ sch_admire44  : int  NA NA 581 NA NA NA NA NA NA NA ...
 $ sch_admire45  : int  NA NA 582 NA 271 NA 595 NA NA 104 ...
 $ sch_admire46  : int  NA NA NA NA 365 NA 339 NA NA 154 ...
 $ sch_admire47  : int  NA NA 589 NA 446 NA NA NA NA NA ...
 $ sch_succeed41 : int  109 42 NA NA NA NA 109 463 NA 25 ...
 $ sch_succeed42 : int  NA NA 621 NA 85 1 463 595 595 63 ...
 $ sch_succeed43 : int  NA NA NA NA 123 48 NA 515 NA 59 ...
 $ sch_succeed44 : int  NA NA 580 NA 186 NA NA NA NA 306 ...
 $ sch_succeed45 : int  NA NA 581 NA 134 NA 595 NA NA 268 ...
 $ sch_succeed46 : int  NA NA 582 NA 261 NA 313 NA NA NA ...
 $ sch_succeed47 : int  NA NA NA NA 324 NA NA NA NA NA ...
 $ sch_popular41 : int  53 NA 621 104 184 NA 2 148 73 53 ...
 $ sch_popular42 : int  NA NA 580 284 186 15 NA NA 474 154 ...
 $ sch_popular43 : int  NA NA 581 NA 148 36 284 NA 262 NA ...
 $ sch_popular44 : int  NA NA 582 NA 151 284 NA NA NA NA ...
 $ sch_popular45 : int  NA NA NA NA 209 261 NA NA NA NA ...
 $ sch_popular46 : int  NA NA NA NA 301 107 NA NA NA NA ...
 $ sch_popular47 : int  NA NA NA NA 441 NA NA NA NA NA ...
 $ sch_dislike41 : int  86 NA NA NA 36 271 130 22 NA NA ...
 $ sch_dislike42 : int  NA NA NA NA 120 NA 334 NA NA 78 ...
 $ sch_dislike43 : int  NA NA NA NA 73 288 NA NA NA 144 ...
 $ sch_dislike44 : int  NA NA NA NA 154 NA NA NA NA NA ...
 $ sch_dislike45 : int  NA NA NA NA 271 NA NA NA NA NA ...
 $ sch_dislike46 : int  NA NA NA NA 352 NA NA NA NA NA ...
 $ sch_dislike47 : int  NA NA NA NA 557 NA NA NA NA NA ...
 $ sch_want41    : int  1 NA NA NA 59 55 410 NA NA NA ...
 $ sch_want42    : int  NA NA NA NA 41 53 361 NA NA NA ...
 $ sch_want43    : int  NA NA NA NA 123 NA 301 NA NA NA ...
 $ sch_want44    : int  NA NA NA NA 119 289 181 NA NA NA ...
 $ sch_want45    : int  NA NA NA NA 184 NA NA NA NA NA ...
 $ sch_want46    : int  NA NA NA NA 186 NA NA NA NA NA ...
 $ sch_want47    : int  NA NA NA NA 557 NA NA NA NA NA ...
 $ sch_study41   : int  109 NA 589 NA 184 319 79 37 NA NA ...
 $ sch_study42   : int  NA NA NA NA NA 320 214 NA NA NA ...
 $ sch_study43   : int  NA NA NA NA 377 506 NA NA NA NA ...
 $ sch_study44   : int  NA NA NA NA 145 NA NA NA 201 NA ...
 $ sch_study45   : int  NA NA 505 NA NA NA NA NA NA NA ...
 $ sch_study46   : int  NA NA 89 NA NA NA NA NA NA NA ...
 $ sch_study47   : int  NA NA NA NA NA NA NA NA NA NA ...
 $ sch_cool41    : int  330 NA 89 13 NA 15 284 22 NA 104 ...
 $ sch_cool42    : int  NA NA 170 387 NA NA 313 NA NA 116 ...
 $ sch_cool43    : int  NA NA 234 608 NA 36 271 NA NA 221 ...
 $ sch_cool44    : int  NA NA NA 93 NA 506 NA NA NA 402 ...
 $ sch_cool45    : int  NA NA NA 119 NA NA NA NA NA NA ...
 $ sch_cool46    : int  NA NA 475 627 NA NA NA NA NA NA ...
 $ sch_cool47    : int  NA NA 597 NA NA NA NA NA NA NA ...
 $ t4_PhotoID    : int  1 2 9 10 11 12 16 18 20 22 ...
 $ t4_q2         : int  411 411 411 411 411 411 411 411 411 411 ...
 $ t4_q1         : chr  "Arroyo" "Arroyo" "Arroyo" "Arroyo" ...
 $ t4_q5         : chr  "Eastridge" "Eastridge" "Witt" "Eastridge" ...
 $ t4_a1_f1fn    : chr  "Joey" "Robert" "Julie" "Giselle" ...
 $ t4_a1_f1ln    : chr  "Buligan" "Turner" "Troung" "Rivera" ...
 $ t4_a1_f2fn    : chr  "Matthew" "Marcos" "Phuong" "Vanessa" ...
 $ t4_a1_f2ln    : chr  "Medina" "Lopes" "Tran" "Ortiz" ...
 $ t4_a1_f3fn    : chr  "Giovanni" "Eddie" "Steven" "Kimberly" ...
 $ t4_a1_f3ln    : chr  "Lopez" "Sanez" "Kha" "Quintanilla" ...
 $ t4_a1_f4fn    : chr  "Leo" "Tyler" "Christoph" "Anai" ...
 $ t4_a1_f4ln    : chr  "Horta" "Ogden" "Tram" "Sanchez" ...
 $ t4_a1_f5fn    : chr  "" "" "Jolin" "Regina" ...
 $ t4_a1_f5ln    : chr  "" "" "Lu" "De la Cruz" ...
 $ t4_a1_f6fn    : chr  "" "" "Tony" "Stephanie" ...
 $ t4_a1_f6ln    : chr  "" "" "Lam" "Diaz" ...
 $ t4_a1_f7fn    : chr  "" "" "Billy" "Veronica" ...
 $ t4_a1_f7ln    : chr  "" "" "Le" "Jimenez" ...
 $ t4_b1_f1fn    : chr  "Joey" "Marcos" "Yi" "Vanessa" ...
 $ t4_b1_f1ln    : chr  "Dullgan" "Lopez" "Lu" "Ortiz" ...
 $ t4_b1_f2fn    : chr  "Manuel" "Edward" "Phuong" "Kimberly" ...
 $ t4_b1_f2ln    : chr  "Vasquez" "Saenz" "Tran" "Quintanilla" ...
 $ t4_b1_f3fn    : chr  "Matthew" "Robert" "Steven" "Brandi" ...
 $ t4_b1_f3ln    : chr  "Medina" "Turner" "Kha" "Purdom" ...
 $ t4_b1_f4fn    : chr  "Giovanni" "Zachary" "Tanvir" "Carolina" ...
 $ t4_b1_f4ln    : chr  "Lopez" "Daniels" "Pathan" "Huerta" ...
 $ t4_b1_f5fn    : chr  "" "Andre" "" "Yesenia" ...
 $ t4_b1_f5ln    : chr  "" "Kerkhoff" "" "Ramirez" ...
  [list output truncated]
 - attr(*, "datalabel")= chr ""
 - attr(*, "time.stamp")= chr "13 Aug 2015 17:27"
 - attr(*, "formats")= chr [1:2040] "%12.0g" "%10.0g" "%10.0g" "%10.0g" ...
 - attr(*, "types")= int [1:2040] 253 252 252 252 252 252 252 252 252 252 ...
 - attr(*, "val.labels")= chr [1:2040] "" "" "" "" ...
 - attr(*, "var.labels")= chr [1:2040] "" "School" "t1_PhotoID" "1 sch_friend4" ...
 - attr(*, "expansion.fields")=List of 62
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_cool4" "9 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_study4" "8 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_want4" "7 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_dislike4" "6 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_popular4" "5 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_romant4" "4 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_succeed4" "3 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_admire4" "2 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_friend4" "1 new_alterid"
  ..$ : chr [1:3] "_dta" "ReS_Xij" "sch_friend4 sch_admire4 sch_succeed4 sch_romant4 sch_popular4 sch_dislike4 sch_want4 sch_study4 sch_cool4"
  ..$ : chr [1:3] "_dta" "ReS_str" "0"
  ..$ : chr [1:3] "_dta" "ReS_j" "rank"
  ..$ : chr [1:3] "_dta" "ReS_ver" "v.2"
  ..$ : chr [1:3] "_dta" "ReS_i" "t4_SubjectID"
  ..$ : chr [1:3] "_dta" "__XijVarLabnew_alterid" "t1_PhotoID"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_popular2" "2 net25"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_romant2" "2 net24"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_succeed2" "2 net23"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_admire2" "2 net22"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_friend2" "2 net21"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_popular1" "2 net15"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_romant1" "2 net14"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_succeed1" "2 net13"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_admire1" "2 net12"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_friend1" "2 net11"
  ..$ : chr [1:3] "_dta" "__XijVarLabcls_popular2" "1 net25"
  ..$ : chr [1:3] "_dta" "__XijVarLabcls_romant2" "1 net24"
  ..$ : chr [1:3] "_dta" "__XijVarLabcls_succeed2" "1 net23"
  ..$ : chr [1:3] "_dta" "__XijVarLabcls_admire2" "1 net22"
  ..$ : chr [1:3] "_dta" "__XijVarLabcls_friend2" "1 net21"
  ..$ : chr [1:3] "_dta" "__XijVarLabcls_popular1" "1 net15"
  ..$ : chr [1:3] "_dta" "__XijVarLabcls_romant1" "1 net14"
  ..$ : chr [1:3] "_dta" "__XijVarLabcls_succeed1" "1 net13"
  ..$ : chr [1:3] "_dta" "__XijVarLabcls_admire1" "1 net12"
  ..$ : chr [1:3] "_dta" "__XijVarLabcls_friend1" "1 net11"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet25" "5 net2"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet15" "5 net1"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet24" "4 net2"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet14" "4 net1"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet23" "3 net2"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet13" "3 net1"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet22" "2 net2"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet12" "2 net1"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet21" "1 net2"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet11" "1 net1"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet1" "1 alter_id"
  ..$ : chr [1:3] "_dta" "__XijVarLabnet2" "2 alter_id"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_popular3" "5 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_romant3" "4 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_succeed3" "3 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_admire3" "2 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_friend3" "1 new_alterid"
  ..$ : chr [1:3] "t3_subid" "destring" "Characters removed were:  -"
  ..$ : chr [1:3] "t1_subid_3" "destring" "Characters removed were:  -"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_dislike3" "1 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_want3" "2 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_study3" "3 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabsch_cool3" "4 new_alterid"
  ..$ : chr [1:3] "_dta" "__XijVarLabalter_id1" "1 alter_id"
  ..$ : chr [1:3] "_dta" "__XijVarLabalter_id2" "2 alter_id"
  ..$ : chr [1:3] "_dta" "__XijVarLabalter_id3" "3 alter_id"
  ..$ : chr [1:3] "_dta" "__XijVarLabalter_id4" "4 alter_id"
 - attr(*, "version")= int 12
 - attr(*, "label.table")=List of 1
  ..$ _merge: Named int [1:5] 1 2 3 4 5
  .. ..- attr(*, "names")= chr [1:5] "master only (1)" "using only (2)" "matched (3)" "missing updated (4)" ...
 - attr(*, ".internal.selfref")=<externalptr> 
> 
> # Creating a unique id ---------------------------------------------------------
> dat[, .(photoid, School)][, lapply(.SD, range)]
   photoid School
1:       1    111
2:    2074    115
> dat[, id := sprintf("%03i-%04i", School, photoid)]
> 
> # Unique id for alters
> netnames <- names(dat)[grepl("sch_friend", names(dat))]
> 
> for (f in netnames) {
+   isna     <- is.na(dat[[f]])
+   dat[[f]] <- sprintf("%03i-%04i", dat$School, dat[[f]])
+   dat[[f]][isna] <- NA_character_
+ }
> 
> # Reshaping the data to long ---------------------------------------------------
> dat_long <- melt(
+   dat, 
+   id.vars = c("id", "hispanic"),
+   measure.vars = list(
+     female     = c("t1_i2", "t2_i2", "t3_i2", "t4_ni3"),
+     grades     = c("t1_i11", "t2_i11", "t3_i11", "t4_ni11"),
+     eversmk    = c("t1_j1", "t2_j1", "t3_j1", "t4_nj1"),
+     everdrink  = c("t1_j10","t2_j10", "t3_j11", "t4_nj12"),
+     # [2022-10-06] Recoded year 3, it is 21 in the survey.
+     evermj     = c("t1_j18","t2_j18", "t3_j18", "t4_nj21"), 
+     sibsmoke   = c("t1_j7", "t2_j7", "t3_j7", "t4_nj8"),
+     sibdrink   = c("t1_j15", "t2_j15", "t3_j15", "t4_nj19"),
+     adultdrink = c("t1_j14", "t2_j14", "t3_j14", "t4_nj18"),
+     year_value = c("t1_q6_year", "t2_q6_year", "t3_q6_year", "t4_q6_year"),
+     present    = paste0("wave", 1:4)
+   ),
+   variable.name = "year"
+ )
> 
> dat_long[, year := as.integer(year)]
> 
> # Fixing year
> dat_long[year == 3L, year_value := 2012]
> dat_long[year == 2L, year_value := 2011]
> dat_long[year == 4L, year_value := 2013]
> 
> # We don't need to explicitly remove individuals as we may have
> # information about past grades
> # dat_long <- dat_long[!is.na(present)]
> 
> dat_long[, school := as.integer(gsub("-.+", "", id))]
> setorder(dat_long, school, id, year)
> 
> # Filling in the blanks --------------------------------------------------------
> 
> # Hispanic and Female
> dat_long[, table(hispanic, useNA = "always")]
hispanic
   0    1 <NA> 
1252 3660 3744 
> dat_long[, table(female, useNA = "always")]
female
   1    2 <NA> 
2804 2627 3225 
> 
> dat_long[, hispanic := nafill(hispanic, type = "locf"), by = "id"] # Neither makes a change
> dat_long[, hispanic := nafill(hispanic, type = "nocb"), by = "id"]
> 
> dat_long[, female := nafill(female, type = "locf"), by = "id"] # Makes a huge change
> dat_long[, female := nafill(female, type = "nocb"), by = "id"] 
> dat_long[!is.na(female), female := female == 1L]
> 
> # Grades 
> # 1 Mostly A’s
> # 2 Mostly A’s and B’s
> # 3 Mostly B’s
> # 4 Mostly B’s and C’s
> # 5 Mostly C’s
> # 6 Mostly C’s and D’s
> # 7 Mostly D’s
> # 8 Mostly D’s and F’s
> # 9 Mostly F’s
> # I wasn’t in school last year
> dat_long[, grades := as.numeric(grades)]
> dat_long[, grades := fifelse(grades == 10, NA_real_, grades)]
> dat_long[, grades := (11.0 - grades)/2.0] # Now 1:F and 5:A
> dat_long[, grades := fcoalesce(grades, mean(grades, na.rm = TRUE)), by = "id"]
> 
> # Ever smoke/drink/mj
> # If all responses were 0, then 0 can be imputed to the past
> dat_long[, table(eversmk, year, useNA = "always")]
       year
eversmk    1    2    3    4 <NA>
   1     475  452  328  410    0
   2    1089 1119  721  808    0
   <NA>  600  593 1115  946    0
> 
> dat_long[, table(everdrink, year, useNA = "always")]
         year
everdrink    1    2    3    4 <NA>
     1     741  806  373  532    0
     2     263  240   52  178    0
     3     204  195   29  181    0
     4     108  107   72   86    0
     5      94   83  182   99    0
     6      40   55  297   58    0
     7      39   48   33   43    0
     <NA>  675  630 1126  987    0
> 
> dat_long[, table(evermj, year, useNA = "always")]
      year
evermj    1    2    3    4 <NA>
  1     394  428  347  442    0
  2    1036 1095  690  734    0
  <NA>  734  641 1127  988    0
> 
> # Sibling smoke
> dat_long[, table(sibsmoke, year, useNA = "always")]
        year
sibsmoke    1    2    3    4 <NA>
    1     259  215  140  182    0
    2       7    5   11   15    0
    3      12   13    6    6    0
    4    1147 1207  834  925    0
    5      93  107   51   76    0
    <NA>  646  617 1122  960    0
> dat_long[, table(sibdrink, year, useNA = "always")]
        year
sibdrink    1    2    3    4 <NA>
    1     107  443  324  403    0
    2    1156   17    9   19    0
    3     104   12   14   16    0
    4      26  947  631  661    0
    5       0  101   53   74    0
    <NA>  771  644 1133  991    0
> dat_long[, table(adultdrink, year, useNA = "always")]
          year
adultdrink    1    2    3    4 <NA>
      1     753  848  570  660    0
      2     511  484  338  388    0
      3     194  202  131  131    0
      <NA>  706  630 1125  985    0
> 
> 
> dat_long[, sibsmoke := nafill(sibsmoke, type = "locf"), by = "id"]
> 
> # Dichotomizing
> dat_long[!is.na(eversmk), eversmk := eversmk == 1]
> dat_long[!is.na(everdrink), everdrink := everdrink > 1]
> dat_long[!is.na(evermj), evermj := evermj == 1]
> dat_long[!is.na(sibsmoke), has_sib  := sibsmoke != 5]
> dat_long[!is.na(sibsmoke), sibsmoke := sibsmoke < 4]
> dat_long[!is.na(sibdrink), sibdrink := fifelse(
+   year == 4, sibdrink < 4,
+   sibdrink == 3
+   )]
> 
> dat_long[, has_sib := as.integer(has_sib)]
> 
> dat_long[!is.na(adultdrink), adultdrink := adultdrink > 1]
> 
> setorder(dat_long, school, id, year)
> 
> # Indicator variable to measure if they had a change of response ---------------
> # Looking for cases in which they go from yes to no.
> dat_long[, c("chng_smk", "chng_drink", "chng_mj") := lapply(.SD, \(e) {
+   
+   n <- length(e)
+   tmp <- e[!is.na(e)]
+   if (length(tmp) < 2)
+     return(rep(NA, n))
+   
+   # Going from yes (1) to no (0)?
+   if (any(diff(tmp) < 0))
+     return(rep(TRUE, n))
+   else
+     rep(FALSE, n)
+   
+ }), by = "id", .SDcols = c("eversmk", "everdrink", "evermj")]
> 
> dat_long <- dat_long[!chng_smk & !chng_drink & !chng_mj]
> dat_long[, chng_smk := NULL]
> dat_long[, chng_drink := NULL]
> dat_long[, chng_mj := NULL]
> 
> # Carry forward the ones -------------------------------------------------------
> dat_long[, c("eversmk", "everdrink", "evermj") := lapply(.SD, \(e) {
+   tmp <- which.max(e)
+   # print(e)
+   if (!length(tmp))
+     e
+   else if (e[tmp] == 1) {
+     res <- e
+     res[tmp:length(res)] <- 1L
+     res
+   } else 
+     e
+ }), by = "id", .SDcols = c("eversmk", "everdrink", "evermj")]
> 
> # Carry Backwards zeros --------------------------------------------------------
> dat_long[, c("eversmk", "everdrink", "evermj") := lapply(.SD, \(e) {
+   tmp <- which.min(e)
+   # print(e)
+   if (!length(tmp))
+     e
+   else if (e[tmp] == 0) {
+     res <- e
+     res[1:tmp] <- 0L
+     res
+   } else 
+     e
+ }), by = "id", .SDcols = c("eversmk", "everdrink", "evermj")]
> 
> # Generating toa
> dat_long[, toa_smoke := which(eversmk == TRUE)[1], by = "id"]
> dat_long[, toa_drink := which(everdrink == TRUE)[1], by = "id"]
> dat_long[, toa_mj := which(evermj == TRUE)[1], by = "id"]
> 
> # Creating edgelist ------------------------------------------------------------
> schfriends <- names(dat)[grepl("sch_frie", names(dat))]
> 
> edgelist <- NULL
> for (i in 1:4) {
+   
+   # Getting the year
+   schfriends_i <- schfriends[grepl(paste0("d", i), schfriends)]
+   
+   edgelist_i <- subset(dat, select = c("id", schfriends_i))
+                        
+   edgelist_i[, year := i]
+   edgelist_i <- melt(
+     edgelist_i,
+     id.vars = c("id", "year"),
+     measure.vars = schfriends_i
+   )
+   
+   edgelist <- rbind(
+     edgelist,
+     edgelist_i[complete.cases(edgelist_i)]
+   )
+     
+ }
> 
> edgelist <- edgelist[, .(year, ego = id, alter = value)]
> edgelist[, school := as.integer(gsub("-.+", "", ego))]
> 
> # Generating exposure variable -------------------------------------------------
> 
> # Generating the graph
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> # Networks by year
> networks <- vector("list", length = 4L)
> for (y in 1:4) {
+   
+   # Removing individuals in edgelist who don't show in the network
+   edgelist_y <- edgelist[year == y, .(ego, alter)]
+   vertices_y <- dat_long[year == y]
+   edgelist_y <- edgelist_y[ego %in% vertices_y$id & alter %in% vertices_y$id]
+   
+   networks[[y]] <-graph_from_data_frame(
+     edgelist_y,
+     vertices = vertices_y
+   )
+   
+ }
> 
> # Identifying schools
> schools <- sort(unique(dat_long$school))
> 
> # Grouping the networks by year
> for (i in seq_along(networks)) {
+ 
+   networks[[i]] <- lapply(schools, \(s) {
+     induced_subgraph(networks[[i]], which(V(networks[[i]])$school == s))
+   })
+ 
+ }
> 
> # Now, reorganizing by school + year
> networks_by_school <- vector("list", length = length(schools))
> for (i in seq_along(schools)) {
+ 
+   # Extracting the ith school in each year.
+   # this way the networks_by_school[[i]] will have the
+   # four records (years) for each school.
+   networks_by_school[[i]] <- lapply(networks, \(n) {
+     n[[i]]
+   })
+ }
> 
> # Exposures --------------------------------------------------------------------
> exposures <- list()
> 
> # Smoke
> for (s in seq_along(networks_by_school)) {
+ 
+   # Subsetting the network
+   net       <- networks_by_school[[s]]
+   school_id <- schools[s]
+ 
+   # Creating the diffnet object
+   exposures[[s]] <- new_diffnet(
+     graph            = lapply(net, as_adj),
+     vertex.dyn.attrs = lapply(net, get.data.frame, what="vertices"),
+     toa              = (
+       dat_long[school == school_id, .(id, toa_smoke)]
+       |> unique()
+       )[, toa_smoke]
+   ) 
+ 
+   # Computing exposures
+   exposures[[s]][["exposure_smoke"]]    <- exposure(exposures[[s]])
+   exposures[[s]][["exposure_smoke_se"]] <- exposure(exposures[[s]], alt.graph = "se")
+   exposures[[s]][["exposure_female"]]   <- exposure(exposures[[s]], attrs = "female")
+ 
+   # Turning into a data table object
+   exposures[[s]] <- as.data.frame(exposures[[s]]) |>
+     as.data.table()
+ 
+   # Merging with long_dataset
+   exposures[[s]] <- merge(
+     dat_long[school == school_id,],
+     exposures[[s]][,.(
+       id, year = as.integer(per),
+       # All the computed exposures
+       exposure_smoke, exposure_smoke_se, exposure_female
+       )],
+     all.x = TRUE, all.y = FALSE
+   )
+ 
+ }
'as(<dgeMatrix>, "dgCMatrix")' is deprecated.
Use 'as(., "CsparseMatrix")' instead.
See help("Deprecated") and help("Matrix-deprecated").
Warning messages:
1: In exposure(exposures[[s]], alt.graph = "se") :
  To use alt.graph="se" -valued- has been switched to TRUE.
2: In max(geod@x, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
3: In exposure(exposures[[s]], alt.graph = "se") :
  To use alt.graph="se" -valued- has been switched to TRUE.
4: In exposure(exposures[[s]], alt.graph = "se") :
  To use alt.graph="se" -valued- has been switched to TRUE.
5: In exposure(exposures[[s]], alt.graph = "se") :
  To use alt.graph="se" -valued- has been switched to TRUE.
6: In exposure(exposures[[s]], alt.graph = "se") :
  To use alt.graph="se" -valued- has been switched to TRUE.
> 
> # Putting all in a single list
> dat_long <- exposures |> rbindlist()
> 
> # Lagging exposures
> dat_long[, exposure_smoke := shift(
+   exposure_smoke, n = 1, type = "lag", fill = -1
+   ), by = id]
> 
> dat_long[, exposure_smoke_se := shift(
+   exposure_smoke_se, n = 1, type = "lag", fill = -1
+   ), by = id]
> 
> dat_long[, exposure_female := shift(
+   exposure_female, n = 1, type = "lag", fill = -1
+   ), by = id]
> 
> # Final cleaning ---------------------------------------------------------------
> 
> # Renaming
> new_names <- c(
+   everdrink = "alcohol",
+   eversmk   = "tobacco",
+   evermj    = "mj",
+   hispanic  = "Hispanic",
+   grades    = "Grades",
+   female    = "Female"
+ )
> setnames(
+   dat_long,
+   names(new_names),
+   new_names
+   )
> 
> fwrite(dat_long, "data/sns_model_data.csv")
> saveRDS(networks, "data/sns_igraph.rds")
> 
> proc.time()
   user  system elapsed 
 34.484   2.373  36.352 
